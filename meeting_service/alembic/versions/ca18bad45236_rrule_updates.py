"""RRule updates

Revision ID: ca18bad45236
Revises: a1d98bec6a46
Create Date: 2024-07-18 13:51:50.189565

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ca18bad45236"
down_revision: Union[str, None] = "a1d98bec6a46"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "meeting_recurrences", sa.Column("rrule", sa.String(), nullable=False)
    )
    op.alter_column(
        "meeting_recurrences",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("meeting_recurrences", "month_week")
    op.drop_column("meeting_recurrences", "frequency")
    op.drop_column("meeting_recurrences", "week_day")
    op.drop_column("meeting_recurrences", "end_recurrence")
    op.drop_column("meeting_recurrences", "interval")
    op.alter_column(
        "meetings",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "tasks",
        "due_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "tasks",
        "completed_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "tasks",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "tasks",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "tasks",
        "completed_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "tasks",
        "due_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "meetings",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.add_column(
        "meeting_recurrences",
        sa.Column("interval", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "meeting_recurrences",
        sa.Column(
            "end_recurrence", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "meeting_recurrences",
        sa.Column("week_day", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "meeting_recurrences",
        sa.Column("frequency", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "meeting_recurrences",
        sa.Column("month_week", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.alter_column(
        "meeting_recurrences",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.drop_column("meeting_recurrences", "rrule")
    # ### end Alembic commands ###
